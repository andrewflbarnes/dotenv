#!/usr/bin/env bash

function jwt_decode {
    local token=$1

    if [ -z "$token" ]
    then
        echo "Please provide a JWT as the first argument" >&2
        return
    fi

    local line
    local i=0
    tr '.' '\n' <<< "$token" \
        | awk '
            FNR < 3 {
                pad=length($1) % 4;
                printf $1;
                if (pad > 0) {
                    printf substr("==", 0, 4 - pad)
                }
                printf "\n"
            }
            FNR == 3 {
                print $1;
            }
        ' \
        | while read -r line
        do
            i=$((i+1))
            if [ $i -eq 3 ]
            then
              echo "$(cut -b-8 <<< "$line")<MASKED>"
            else
                base64 --decode <<< "$line" | jq .
            fi
        done
}
export -f jwt_decode

function jwk_well_known {
    local url=$1

    if [ -z "$url" ]
    then
        echo "USAGE: jwk_well_known url" >&2
        return 1
    fi

    curl -fSsL "$url/.well-known/openid-configuration" \
        | jq .
}
export -f jwk_well_known

function jwk_jwks_uri {
    local url=$1

    if [ -z "$url" ]
    then
        echo "USAGE: jwk_jwks_uri url" >&2
        return 1
    fi

    local jwks_uri
    jwks_uri="$(jwk_well_known "$url" | jq -r .jwks_uri)"
    echo "$jwks_uri"
}
export -f jwk_jwks_uri

function jwks {
    local url=$1

    if [ -z "$url" ]
    then
        echo "USAGE: jwks url" >&2
        return 1
    fi

    local jwks_uri
    jwks_uri="$(jwk_jwks_uri "$url")"

    curl -fSsL "$jwks_uri" | jq .
}
export -f jwks

function jwk {
    local url=$1
    local alg=$2
    local kid=$3

    if [ -z "$kid" ]
    then
        echo "USAGE: jwk url alg kid" >&2
        return 1
    fi

    jwks "$url" \
        | jq \
            -r \
            --arg kid "$kid" \
            --arg alg "$alg" \
            '.keys | map(select(.kid==$kid and .alg==$alg))[0]'
}
export -f jwk
