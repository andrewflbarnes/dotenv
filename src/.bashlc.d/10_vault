#!/usr/bin/env bash

function _vault_cubbify_help {
    echo "SYNTAX: vault_cubbify <command> <endpoint> <key> [as-role]"
    echo " WHERE:"
    echo " - command is the vault command i.e. read or write"
    echo " - endpoint is the vault endpoint to read/write secrets to"
    echo " - key is the key to store the secrets in the cubbyhole under"
    echo " - as-role is any non-empty value which will trigger vault_as_role for data fetching"
    echo
    echo "For example:"
    echo "vault_cubbify read database/org/role/creds/org_role db-role-creds 1"
    echo
    echo "The above will"
    echo " - read the secrets stored/generated at the database/org/role/creds/org_role endpoint"
    echo " - use vault_as_role to read the secrets"
    echo " - save the secrets and all associated metadata to cubbyhole/db-role-creds"
    echo
    echo "The data can now be read with"
    echo " vault read cubbyhole/db-role-creds"
    echo
    echo "This is intended for saving dynamically created credentials and other similar secrets"
    echo "where each read/write generates a new credential."
}
export -f _vault_cubbify_help

# execute a vault command then store the results in cubbyhole under the requested key
function vault_cubbify {
    local comm=$1
    local endpoint=$2
    local key=$3
    local as_role=$4

    local vault_comm
    if [ -z "$as_role" ]
    then
        vault_comm=vault
    else
        vault_comm=vault_as_role
    fi

    if [ -z "$key" ]
    then
        _vault_cubbify_help >&2
        return 1
    fi

    local content
    content=$(eval "$vault_comm $comm -format table $endpoint" | awk 'NR > 2 { printf $1"="$2" " }' )

    vault write cubbyhole/$key $content

    vault read cubbyhole/$key
}
export -f vault_cubbify

export VAULT_LEASE_HOME="${HOME}/.vault-leases"
function vault_lease_renew {
  local lease=$1
  local env=${2:$VAULT_ENV}

  if [ -z "$lease" ]
  then
    echo "SYNTAX: vault_lease_renew <lease_id> [env]" >&2
    return 1
  fi

  if [ -z "$env" ]
  then
    echo "Provide an environment to use or run vaultprofile" >&2
    return 1
  fi

  if ! mkdir -p "$VAULT_LEASE_HOME"
  then
    echo "Unable to create vault lease home \"$VAULT_LEASE_HOME\"" >&2
    return 1
  fi

  (
    _vault_use_env "$env"
    local logfile=$VAULT_LEASE_HOME/${lease//\//-}
    local infofile=$VAULT_LEASE_HOME/${lease//\//-}.info
    nohup sh -c "echo pid=\$\$ > \"$infofile\"; echo \"lease=$lease\" >> \"$infofile\"; while true; do vault lease renew \"$lease\" || exit 1; vault lease lookup \"$lease\"; sleep 3600; done;" > "$logfile" &
  )
}
export -f vault_lease_renew

function vault_lease_list {
  awk 'BEGIN { FS="=" } $1 == "lease" { print $2 }' "$VAULT_LEASE_HOME"/*.info
}
export -f vault_lease_list
