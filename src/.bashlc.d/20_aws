#!/usr/bin/env bash

# NOTE: AWS_DEFAULT_REGION supplied for backwards compatibility
export AWS_REGION=us-east-1
export AWS_DEFAULT_REGION=$AWS_REGION
export _aws_credentials="${HOME}/.aws/credentials"

export _aws_none=none
export _aws_default=default

function _awsprofiles {
    local prefix=$1
    sed -n '/^\[/{s/[][]*//g;p;}' "${_aws_credentials}" | grep "^$prefix" | grep -v "^${_aws_default}$" | sort
}
export -f _awsprofiles

function awsprofile {
    local profile=$1
    local profiles=(${_aws_default} $(grep "^\[[a-z:-]*]$" ${_aws_credentials} | grep -v "\[default]" | tr -d '[]' | sort))
    local profile_count=${#profiles[@]}

    if [[ -z "${profile}" ]] || [[ "${profile}" =~ ^[0-9]+$ && $((profile_count-profile-1)) -lt 0 ]] || [[ ! "${profile}" =~ ^[0-9]+$ && ! " ${profiles[@]} " =~ " ${profile} " ]]
    then
        echo "Please provide an existing profile id/name:" >&2
        local i=0
        for p in ${profiles[@]}
        do
            if [[ "${AWS_PROFILE}" = "${p}" ]] || [ -z "${AWS_PROFILE}" -a "${i}" -eq 0 ]
            then
                printf -- "- %-4s ${_fmt_g}${p}${_fmt_x}\n" "(${i})" >&2
            else
                printf -- "- %-4s ${p}\n" "(${i})" >&2
            fi
            i=$((i+1))
        done
        return
    fi

    if [[ "${profile}" =~ ^(${_aws_default}|0)$ ]]
    then
        unset AWS_PROFILE
    elif [[ "${profile}" =~ ^[0-9]+$ ]]
    then
        export AWS_PROFILE=${profiles[profile]}
    else
        export AWS_PROFILE=${profile}
    fi
}
export -f awsprofile

# completion
function _awsprofile {
    local length=${#COMP_WORDS[@]}
    if [ $length -gt 2 ]
    then
        COMPREPLY=()
        return
    fi

    local profile_prefix=${COMP_WORDS[1]}
    local use_default=""
    [[ -z "${profile_prefix}" || "${_aws_default}" =~ ^${profile_prefix}.* ]] && use_default=${_aws_default}
    COMPREPLY=(${use_default} $(_awsprofiles $profile_prefix))
}
export -f _awsprofile

export _aws_regions=(
${_aws_none}
af-south-1
ap-east-1
ap-northeast-1
ap-northeast-2
ap-northeast-3
ap-south-1
ap-southeast-1
ap-southeast-2
ca-central-1
eu-central-1
eu-north-1
eu-south-1
eu-west-1
eu-west-2
eu-west-3
me-south-1
sa-east-1
us-east-1
us-east-2
us-west-1
us-west-2
)

function _awsregions {
    local prefix=$1
    printf "%s\n" "${_aws_regions[@]}" | grep "^$prefix" |  grep -v "^${_aws_none}$" | sort
}
export -f _awsregions

function awsregion {
    local region=$1
    local regions=(${_aws_regions[@]})
    local region_count=${#regions[@]}

    if [[ -z "${region}" ]] || [ $((region_count-region-1)) -lt 0 ] || [[ ! "${region}" =~ ^[0-9]+$ && ! " ${regions[@]} " =~ " ${region} " ]]
    then
        echo "Please provide an existing region id/name:" >&2
        local i=0
        for p in ${regions[@]}
        do
            if [[ "${AWS_REGION}" = "${p}" ]] || [ -z "${AWS_REGION}" -a "${i}" -eq 0 ]
            then
                printf -- "- %-4s ${_fmt_g}${p}${_fmt_x}\n" "(${i})" >&2
            else
                printf -- "- %-4s ${p}\n" "(${i})" >&2
            fi
            i=$((i+1))
        done
        return
    fi

    if [[ "${region}" =~ ^(${_aws_none}|0)$ ]]
    then
        unset AWS_REGION
        unset AWS_DEFAULT_REGION
    elif [[ "${region}" =~ ^[0-9]+$ ]]
    then
        export AWS_REGION=${regions[region]}
        export AWS_DEFAULT_REGION=$AWS_REGION
    else
        export AWS_REGION=${region}
        export AWS_DEFAULT_REGION=$AWS_REGION
    fi
}
export -f awsregion

# completion
function _awsregion {
    local length=${#COMP_WORDS[@]}
    if [ $length -gt 2 ]
    then
        COMPREPLY=()
        return
    fi

    local region_prefix=${COMP_WORDS[1]}
    local use_none=""
    [[ -z "${region_prefix}" || "${_aws_none}" =~ ^${region_prefix}.* ]] && use_none=${_aws_none}
    COMPREPLY=(${use_none} $(_awsregions $region_prefix))
}
export -f _awsregion

awsregion us-east-1
