#!/usr/bin/bash

# Updates configuration following a brew upgrade docker
function docker_reup {
  # sudo rsync -avu /Applications/Docker.app/Contents/Library/LaunchServices/com.docker.vmnetd /Library/PrivilegedHelperTools/com.docker.vmnetd
  # sudo rsync -avu ~/.dotenv-etc/com.docker.vmnetd.plist /Library/LaunchDaemons/com.docker.vmnetd.plist
  # sudo chown root:wheel /Library/PrivilegedHelperTools/com.docker.vmnetd
  # sudo chown root:wheel /Library/LaunchDaemons/com.docker.vmnetd.plist
  # sudo chmod 544 /Library/PrivilegedHelperTools/com.docker.vmnetd
  # sudo chmod 644 /Library/LaunchDaemons/com.docker.vmnetd.plist
  # sudo launchctl load /Library/LaunchDaemons/com.docker.vmnetd.plist
  # sudo xattr -r -d com.apple.quarantine /Applications/Docker.app

  sudo xattr -r -d com.apple.quarantine /Applications/Docker.app
  sudo /Applications/Docker.app/Contents/MacOS/Docker --install-privileged-components
  open /Applications/Docker.app

  docker_autocompletion
}
export -f docker_reup

# Adds docker completion scripts to bash completion
function docker_autocompletion {
  for prog in docker{,-compose}
  do
    local source=/Applications/Docker.app/Contents/Resources/etc/${prog}.bash-completion
    local dest=/usr/local/etc/bash_completion.d/${prog}

    if [ -f $source ]
    then
      rm -f $dest
      ln -s $source $dest
    else
      echo WARNING: Completion for $prog not found at $source >&2
    fi
  done
}
export -f docker_autocompletion

function docker_port_mapping {
    local container=$1
    local port=$2

    if [ -z "$port" ]
    then
        echo "USAGE: docker_port_mapping <container> <port>" >&2
        return 1
    fi

    docker container inspect $container \
        | jq --arg port $port -r '
            map(
                .NetworkSettings
                .Ports
                | with_entries(
                    select(
                        .key | test("^" + $port + "/")
                    )
                )
                | to_entries
                | map(.value | map(.HostPort))
                | add
            )
            | add[]
        ' \
        | sort \
        | uniq
}
export -f docker_port_mapping

function docker_proxy_env {
    local proxy=$1
    local noproxy=$2

    if [ ${#@} -lt 2 ]
    then
        echo "USAGE: docker_proxy_env <proxy> <no proxy>" >&2
        return 1
    fi

    echo \
        "--env http_proxy=$proxy" \
        "--env HTTP_PROXY=$proxy" \
        "--env https_proxy=$proxy" \
        "--env HTTPS_PROXY=$proxy" \
        "--env no_proxy=$noproxy" \
        "--env NO_PROXY=$noproxy"
}
export -f docker_proxy_env
