#!/usr/bin/env bash

export VAULT_PROFILE=""
export _vault_prefix=".vault."
export _vault_suffix=""
export _vault_none="none"
export _vault_default_profile=0
export _vault_token_file=${HOME}/.vault-token
export _vault_info_file=${HOME}/.vault-info

# Usage:
#   vaultprofile [ <profile ID> | <profile name> | <env> ]
#
# e.g.
#   vaultprofile 1
#   vaultprofile dev
#   vaultprofile dev.org.role
#
function vaultprofile {
    local environment=${1}
    local environments=(${_vault_none} $(ls ${HOME}/${_vault_prefix}*${_vault_suffix} | xargs -L1 basename | sed "s/^${_vault_prefix}//g;s/${_vault_suffix}/\$/g"))
    local environment_count=${#environments[@]}

    if [[ -z "${environment}" ]] || [[ "${environment}" =~ ^[0-9]+$ && $((environment_count-environment-1)) -lt 0 ]] || [[ ! "${environment}" =~ ^[0-9]+$ && ! " ${environments[@]} " =~ " ${environment} " ]]
    then
        echo "Please provide an existing environment id/name:" >&2
        local i=0
        for e in ${environments[@]}
        do
            if [[ "${VAULT_PROFILE}" = "${e}" ]] || [ -z "${VAULT_PROFILE}" -a "${i}" -eq 0 ]
            then
                printf -- "- %-4s ${_fmt_g}${e}${_fmt_x}\n" "(${i})" >&2
            else
                printf -- "- %-4s ${e}\n" "(${i})" >&2
            fi
            i=$((i+1))
        done
        return
    fi

    if [[ "${environment}" =~ ^(${_vault_none}|0)$ ]]
    then
        unset VAULT_PROFILE
        unset VAULT_ADDR
        unset VAULT_ROLE_ID
        unset VAULT_SECRET_ID
        unset VAULT_ENV
        unset VAULT_ORG
        unset VAULT_ROLE
    else
        local vault_env

        if [[ "${environment}" =~ ^[0-9]+$ ]]
        then
            vault_env=${environments[environment]}
        else
            vault_env=${environment}
        fi

        . ${HOME}/${_vault_prefix}${vault_env}${_vault_suffix}
        export VAULT_PROFILE=${vault_env}

        _vault_set_env_token ${VAULT_ENV}
    fi
}
export -f vaultprofile

function _vault_set_env_token {
    local env=$1
    local vault_env_token_file=${HOME}/.vault-token.${env}

    if [ -z "${env}" ]
    then
        return
    fi

    if [ ! -r ${vault_env_token_file} ]
    then
        vault_login
    else
        mv ${_vault_token_file} ${HOME}/.vault-token.bak
        cp ${vault_env_token_file} ${_vault_token_file}
    fi
}
export -f _vault_set_env_token

function vault_url {
    local env=${1,,}
    if [ -z "${env}" -o "prod" = "${env}" ]
    then
        echo "https://vault.troweprice.io:8200"
    else
        echo "https://vault.${env}.troweprice.io:8200"
    fi

}
export -f vault_url

function vault_setup {
    local env=${1,,}
    local org=${2,,}
    local role=${3,,}
    # TODO trap and reset
    local vault_old_addr=${VAULT_ADDR}
    local vault_old_env=${VAULT_ENV}
    local vault_url=$(vault_url ${env})

    export VAULT_ADDR=${vault_url}
    export VAULT_ENV=${env}
    _vault_set_env_token ${env}

    local vault_file="${HOME}/${_vault_prefix}${env}"

    cat << EOF > ${vault_file}
export VAULT_ADDR=${vault_url}
export VAULT_ENV=${env}
EOF

    if [ -n "${role}" ]
    then
        vault_file="${HOME}/${_vault_prefix}${env}.${org}.${role}"
        local vault_role_id=$(vault_roleid ${org} ${role} | awk '$1=="role_id" {print $2}')
        local vault_secret_id=$(vault_secretid ${org} ${role} | awk '$1=="secret_id" {print $2}')

        cat << EOF > ${vault_file}
export VAULT_ADDR=${vault_url}
export VAULT_ROLE_ID=${vault_role_id}
export VAULT_SECRET_ID=${vault_secret_id}
export VAULT_ENV=${env}
export VAULT_ORG=${org}
export VAULT_ROLE=${role}
EOF
    fi

    export VAULT_ADDR=${vault_old_addr}
    _vault_set_env_token ${vault_old_env}
}
export -f vault_setup

function _vault_role_token {
    vault \
        write \
        -format=json \
        auth/approle/troweprice/${VAULT_ORG}/login \
        role_id=$VAULT_ROLE_ID \
        secret_id=$VAULT_SECRET_ID \
        | jq -r .auth.client_token
}
export -f _vault_role_token

vaultprofile "${_vault_default_profile}"

function vault_login {
    mv ${_vault_token_file} ${HOME}/.vault-token.bak

    local username=$(sed 's/.*\\//' <<< $USER)

    vault login -method=ldap -path=ldap/troweprice/unix username=${username}

    if [ -n "${VAULT_ENV}" ]
    then
        local vault_env_token_file=${HOME}/.vault-token.${VAULT_ENV}

        cp ${_vault_token_file} ${vault_env_token_file}
    fi
}
export -f vault_login

# Usage:
#   vault_roleid <project> <component>
#
# e.g.
#   vault_roleid hadron hadron-data-viewer
#
function vault_roleid {
    if [ -z "$2" ]
    then
        echo "Usage: vault_roleid <project> <component" >&2
        return 1
    fi

    vault read auth/approle/troweprice/${1}/role/${2}/role-id
}
export -f vault_roleid

# Usage:
#   vault_secretid <project> <component>
#
# e.g.
#   vault_secretid hadron hadron-data-viewer
#
function vault_secretid {
    if [ -z "$2" ]
    then
        echo "Usage: vault_secretid <project> <component" >&2
        return 1
    fi

    vault write -f auth/approle/troweprice/${1}/role/${2}/secret-id

    printf "%s===\n=== %sYou must update your VAULT_SECRET_ID export!%s\n===\n%s" $_fmt_g $_fmt_x $_fmt_g $_fmt_x
}
export -f vault_secretid

function vault_oracle {
    vault_secret secret/troweprice/${VAULT_ORG}/${VAULT_ROLE}/hadron_loader_user
}
export -f vault_oracle

function vault_postgres {
    vault_secret database/troweprice/${VAULT_ORG}/${VAULT_ROLE}/creds/hadron_application_user
}
export -f vault_postgres

function vault_as_role {
    if [ -z "${VAULT_PROFILE}" ]
    then
        echo "Please select a vault profile by running vaultprofile" >&2
        return 1
    fi

    local command="$@"

    VAULT_TOKEN=$(_vault_role_token) vault ${command}
}
export -f vault_as_role

function vault_secret {
    local endpoint=$1

    vault_as_role read "${endpoint}"
}
export -f vault_secret

function _vaultinfo_file {
    echo "${_vault_info_file}.${VAULT_ENV}"
}
export -f _vaultinfo_file

function vaultinfo_refresh {
    if [ -z "${VAULT_ENV}" ]
    then
        echo "A valid vault profile must be set - try running \"vaultprofile\"" >&2
        return 1
    fi

    local infofile
    infofile=$(_vaultinfo_file)

    local policy policies
    policies=$(vault token lookup -format json | jq -r '.data.policies[]')
    for policy in $policies
    do
        echo "ZZZ $policy"
        vault policy read $policy
    done \
        | awk '
            /ZZZ/                        { policy=$2 }
            $1 == "path"                 { printf policy " " $2 }
            $1 ~ /(capabilities|policy)/ { $1=""; $2=""; print $0 }
        ' > $infofile
}
export -f vaultinfo_refresh

function vaultinfo {
    if [ -z "${VAULT_ENV}" ]
    then
        echo "A valid vault profile must be set - try running \"vaultprofile\"" >&2
        return 1
    fi

    local infofile
    infofile=$(_vaultinfo_file)

    if [ ! -e $infofile ]
    then
        echo "No vault info has been fetched for the current environment - try running \"vaultinfo_refresh\"" >&2
        return 1
    fi

    {
        echo "ZZZ Approles:"
        echo "ZZZ"
        awk '$2 ~ /^"auth\/approle/ { $1=""; print }' $infofile | sort

        echo "ZZZ"
        echo "ZZZ DB Creds:"
        echo "ZZZ"
        awk '$2 ~ /^"database/ { $1=""; print }' $infofile | sort

        echo "ZZZ"
        echo "ZZZ Secrets:"
        echo "ZZZ"
        awk '$2 ~ /^"secret/ { $1=""; print }' $infofile | sort
    } \
        | sed 's/"//g' \
        | awk '
            $1 != "ZZZ" {
                path=$1
                $1=""
                printf ($0 ~ "create")  ? "c" : "-"
                printf ($0 ~ "write")   ? "w" : "-"
                printf ($0 ~ "read")    ? "r" : "-"
                printf ($0 ~ "update")  ? "u" : "-"
                printf ($0 ~ "delete")  ? "d" : "-"
                printf ($0 ~ "list")    ? "l" : "-"
                printf ($0 ~ "sudo")    ? "S" : "-"
                printf ($0 ~ "deny")    ? "D" : "-"
                printf " " path "\n"
            }
            $1 == "ZZZ" { $1=""; print $0 }
        '
}
export -f vaultinfo
